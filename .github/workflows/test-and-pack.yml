# ----------------------------------------------------------------------------
# GitHub Action workflow to
# - test CGE compilation and automatic tests
# - pack CGE into zip
# Uses CGE Docker image https://hub.docker.com/r/kambi/castle-engine-cloud-builds-tools/ .
#
# See https://docs.github.com/en/actions for docs.
# ----------------------------------------------------------------------------

name: Test and Pack
on: [push]

# setup.sh inside Docker requires using bash
defaults:
  run:
    shell: bash

jobs:
  test-fpclatest:
    runs-on: ubuntu-latest
    # Use Docker image with CGE prerequisites (FPC, Lazarus, Android tools etc.)
    # See https://hub.docker.com/r/kambi/castle-engine-cloud-builds-tools/ .
    container: kambi/castle-engine-cloud-builds-tools:cge-none
    steps:
      - uses: actions/checkout@v2

      # We use https://github.com/marketplace/actions/setup-lazarus-environment
      # to setup FPC+Lazarus easily.
      # - uses: gcarreno/setup-lazarus@v3.0.16
      #   with:
      #     lazarus-version: "stable"

      # Set env CASTLE_ENGINE_PATH following
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
      # https://brandur.org/fragments/github-actions-env-vars-in-env-vars
      - name: Set environment
        run: echo "CASTLE_ENGINE_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Build Tools (FPC Stable)
        run: make clean tools
      # To conserve disk usage on GH Actions runner, use common directory for output of all projects
      - name: Build Examples (FPC Stable)
        run: mkdir -p /tmp/cge/ && make clean examples CASTLE_ENGINE_TOOL_OPTIONS="--output=/tmp/cge/"
      - name: Build Examples Using Lazarus (FPC / Lazarus Stable)
        run: make clean examples-laz
      - name: Build And Run Auto-Tests (FPC Stable)
        run: make clean tests
      - name: Build Using FpMake (FPC Stable)
        run: make clean test-fpmake
  test-fpc320:
    runs-on: ubuntu-latest
    # Use Docker image with CGE prerequisites (FPC, Lazarus, Android tools etc.)
    # See https://hub.docker.com/r/kambi/castle-engine-cloud-builds-tools/ .
    container: kambi/castle-engine-cloud-builds-tools:cge-none
    steps:
      - uses: actions/checkout@v2

      # We use https://github.com/marketplace/actions/setup-lazarus-environment
      # to setup FPC+Lazarus easily.
      # - uses: gcarreno/setup-lazarus@v3.0.16
      #   with:
      #     # latest version with FPC 3.2.0 on https://github.com/marketplace/actions/setup-lazarus-environment
      #     lazarus-version: "2.0.12"

      - name: Set environment
        run: echo "CASTLE_ENGINE_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Build Tools (FPC 3.2.0)
        run: source /usr/local/fpclazarus/bin/setup.sh 3.2.0 && make clean tools
      # To conserve disk usage on GH Actions runner, use common directory for output of all projects
      - name: Build Examples (FPC 3.2.0)
        run: source /usr/local/fpclazarus/bin/setup.sh 3.2.0 && mkdir -p /tmp/cge/ && make clean examples CASTLE_ENGINE_TOOL_OPTIONS="--output=/tmp/cge/"
      - name: Build Examples Using Lazarus (FPC 3.2.0)
        run: source /usr/local/fpclazarus/bin/setup.sh 3.2.0 && make clean examples-laz
      - name: Build And Run Auto-Tests (FPC 3.2.0)
        run: source /usr/local/fpclazarus/bin/setup.sh 3.2.0 && make clean tests
      - name: Build Using FpMake (FPC 3.2.0)
        run: source /usr/local/fpclazarus/bin/setup.sh 3.2.0 && make clean test-fpmake
  pack:
    needs: [test-fpc320, test-fpclatest]
    runs-on: ubuntu-latest
    # Use Docker image with CGE prerequisites (FPC, Lazarus, Android tools etc.)
    # See https://hub.docker.com/r/kambi/castle-engine-cloud-builds-tools/ .
    container: kambi/castle-engine-cloud-builds-tools:cge-none
    steps:
      - uses: actions/checkout@v2

      # - uses: gcarreno/setup-lazarus@v3.0.16
      #   with:
      #     lazarus-version: "stable"

      - name: Set environment
        run: echo "CASTLE_ENGINE_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Remove previous artifacts
        run: rm -f castle-engine*.zip
      - name: Pack
        run: ./tools/internal/pack_release/pack_release.sh
