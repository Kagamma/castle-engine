{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetAutoRefresh: TFloatTime;
    procedure SetAutoRefresh(const Value: TFloatTime);
    function GetAutoRefreshTimeLimit: TFloatTime;
    procedure SetAutoRefreshTimeLimit(const Value: TFloatTime);
    function GetBufferDuration: TFloatTime;
    procedure SetBufferDuration(const Value: TFloatTime);
    function GetDetune: Single;
    procedure SetDetune(const Value: Single);
    function GetLoad: Boolean;
    procedure SetLoad(const Value: Boolean);
    function GetLoop: Boolean;
    procedure SetLoop(const Value: Boolean);
    function GetLoopEnd: TFloatTime;
    procedure SetLoopEnd(const Value: TFloatTime);
    function GetLoopStart: TFloatTime;
    procedure SetLoopStart(const Value: TFloatTime);
    function GetNumberOfChannels: Integer;
    procedure SetNumberOfChannels(const Value: Integer);
    function GetPauseTime: TFloatTime;
    procedure SetPauseTime(const Value: TFloatTime);
    function GetPlaybackRate: Single;
    procedure SetPlaybackRate(const Value: Single);
    function GetResumeTime: TFloatTime;
    procedure SetResumeTime(const Value: TFloatTime);
    function GetSampleRate: Single;
    procedure SetSampleRate(const Value: Single);
    function GetStartTime: TFloatTime;
    procedure SetStartTime(const Value: TFloatTime);
    function GetStopTime: TFloatTime;
    procedure SetStopTime(const Value: TFloatTime);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdAutoRefresh: TSFTime;
    { Internal wrapper for property @code(AutoRefresh). This wrapper API may change, we advise to access simpler @code(AutoRefresh) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdAutoRefresh: TSFTime read FFdAutoRefresh;
    {  }
    property AutoRefresh: TFloatTime read GetAutoRefresh write SetAutoRefresh;

    strict private FFdAutoRefreshTimeLimit: TSFTime;
    { Internal wrapper for property @code(AutoRefreshTimeLimit). This wrapper API may change, we advise to access simpler @code(AutoRefreshTimeLimit) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdAutoRefreshTimeLimit: TSFTime read FFdAutoRefreshTimeLimit;
    {  }
    property AutoRefreshTimeLimit: TFloatTime read GetAutoRefreshTimeLimit write SetAutoRefreshTimeLimit;

    strict private FFdBuffer: TMFFloat;
    { Internal wrapper for property @code(Buffer). This wrapper API may change, we advise to access simpler @code(Buffer) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdBuffer: TMFFloat read FFdBuffer;
    {  }
    procedure SetBuffer(const Value: array of Single); overload;
    {  }
    procedure SetBuffer(const Value: TSingleList); overload;

    strict private FFdBufferDuration: TSFTime;
    { Internal wrapper for property @code(BufferDuration). This wrapper API may change, we advise to access simpler @code(BufferDuration) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdBufferDuration: TSFTime read FFdBufferDuration;
    {  }
    property BufferDuration: TFloatTime read GetBufferDuration write SetBufferDuration;

    strict private FFdChannelCountMode: TSFStringEnum;
    { Internal wrapper for property @code(ChannelCountMode). This wrapper API may change, we advise to access simpler @code(ChannelCountMode) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdChannelCountMode: TSFStringEnum read FFdChannelCountMode;

    strict private FFdChannelInterpretation: TSFStringEnum;
    { Internal wrapper for property @code(ChannelInterpretation). This wrapper API may change, we advise to access simpler @code(ChannelInterpretation) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdChannelInterpretation: TSFStringEnum read FFdChannelInterpretation;

    strict private FFdDetune: TSFFloat;
    { Internal wrapper for property @code(Detune). This wrapper API may change, we advise to access simpler @code(Detune) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdDetune: TSFFloat read FFdDetune;
    {  }
    property Detune: Single read GetDetune write SetDetune;

    strict private FFdLoad: TSFBool;
    { Internal wrapper for property @code(Load). This wrapper API may change, we advise to access simpler @code(Load) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdLoad: TSFBool read FFdLoad;
    {  }
    property Load: Boolean read GetLoad write SetLoad;

    strict private FFdLoop: TSFBool;
    { Internal wrapper for property @code(Loop). This wrapper API may change, we advise to access simpler @code(Loop) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdLoop: TSFBool read FFdLoop;
    {  }
    property Loop: Boolean read GetLoop write SetLoop;

    strict private FFdLoopEnd: TSFTime;
    { Internal wrapper for property @code(LoopEnd). This wrapper API may change, we advise to access simpler @code(LoopEnd) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdLoopEnd: TSFTime read FFdLoopEnd;
    {  }
    property LoopEnd: TFloatTime read GetLoopEnd write SetLoopEnd;

    strict private FFdLoopStart: TSFTime;
    { Internal wrapper for property @code(LoopStart). This wrapper API may change, we advise to access simpler @code(LoopStart) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdLoopStart: TSFTime read FFdLoopStart;
    {  }
    property LoopStart: TFloatTime read GetLoopStart write SetLoopStart;

    strict private FFdNumberOfChannels: TSFInt32;
    { Internal wrapper for property @code(NumberOfChannels). This wrapper API may change, we advise to access simpler @code(NumberOfChannels) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdNumberOfChannels: TSFInt32 read FFdNumberOfChannels;
    {  }
    property NumberOfChannels: Integer read GetNumberOfChannels write SetNumberOfChannels;

    strict private FFdPauseTime: TSFTime;
    { Internal wrapper for property @code(PauseTime). This wrapper API may change, we advise to access simpler @code(PauseTime) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdPauseTime: TSFTime read FFdPauseTime;
    {  }
    property PauseTime: TFloatTime read GetPauseTime write SetPauseTime;

    strict private FFdPlaybackRate: TSFFloat;
    { Internal wrapper for property @code(PlaybackRate). This wrapper API may change, we advise to access simpler @code(PlaybackRate) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdPlaybackRate: TSFFloat read FFdPlaybackRate;
    {  }
    property PlaybackRate: Single read GetPlaybackRate write SetPlaybackRate;

    strict private FFdResumeTime: TSFTime;
    { Internal wrapper for property @code(ResumeTime). This wrapper API may change, we advise to access simpler @code(ResumeTime) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdResumeTime: TSFTime read FFdResumeTime;
    {  }
    property ResumeTime: TFloatTime read GetResumeTime write SetResumeTime;

    strict private FFdSampleRate: TSFFloat;
    { Internal wrapper for property @code(SampleRate). This wrapper API may change, we advise to access simpler @code(SampleRate) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSampleRate: TSFFloat read FFdSampleRate;
    {  }
    property SampleRate: Single read GetSampleRate write SetSampleRate;

    strict private FFdStartTime: TSFTime;
    { Internal wrapper for property @code(StartTime). This wrapper API may change, we advise to access simpler @code(StartTime) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdStartTime: TSFTime read FFdStartTime;
    {  }
    property StartTime: TFloatTime read GetStartTime write SetStartTime;

    strict private FFdStopTime: TSFTime;
    { Internal wrapper for property @code(StopTime). This wrapper API may change, we advise to access simpler @code(StopTime) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdStopTime: TSFTime read FFdStopTime;
    {  }
    property StopTime: TFloatTime read GetStopTime write SetStopTime;

    strict private FFdUrl: TMFString;
    { Internal wrapper for property @code(Url). This wrapper API may change, we advise to access simpler @code(Url) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdUrl: TMFString read FFdUrl;
    {  }
    procedure SetUrl(const Value: array of string); overload;
    {  }
    procedure SetUrl(const Value: TCastleStringList); overload;

    strict private FEventBufferLength: TSFInt32Event;
    {  }
    public property EventBufferLength: TSFInt32Event read FEventBufferLength;

    strict private FEventChannelCount: TSFInt32Event;
    {  }
    public property EventChannelCount: TSFInt32Event read FEventChannelCount;

    strict private FEventElapsedTime: TSFTimeEvent;
    {  }
    public property EventElapsedTime: TSFTimeEvent read FEventElapsedTime;

    strict private FEventIsActive: TSFBoolEvent;
    {  }
    public property EventIsActive: TSFBoolEvent read FEventIsActive;

    strict private FEventIsPaused: TSFBoolEvent;
    {  }
    public property EventIsPaused: TSFBoolEvent read FEventIsPaused;

{$endif read_interface}

{$ifdef read_implementation}

{ TBufferAudioSourceNode ----------------------------------------------- }

function TBufferAudioSourceNode.GetAutoRefresh: TFloatTime;
begin
  Result := FdAutoRefresh.Value;
end;

procedure TBufferAudioSourceNode.SetAutoRefresh(const Value: TFloatTime);
begin
  FdAutoRefresh.Send(Value);
end;

function TBufferAudioSourceNode.GetAutoRefreshTimeLimit: TFloatTime;
begin
  Result := FdAutoRefreshTimeLimit.Value;
end;

procedure TBufferAudioSourceNode.SetAutoRefreshTimeLimit(const Value: TFloatTime);
begin
  FdAutoRefreshTimeLimit.Send(Value);
end;

procedure TBufferAudioSourceNode.SetBuffer(const Value: array of Single);
begin
  FdBuffer.Send(Value);
end;

procedure TBufferAudioSourceNode.SetBuffer(const Value: TSingleList);
begin
  FdBuffer.Send(Value);
end;

function TBufferAudioSourceNode.GetBufferDuration: TFloatTime;
begin
  Result := FdBufferDuration.Value;
end;

procedure TBufferAudioSourceNode.SetBufferDuration(const Value: TFloatTime);
begin
  FdBufferDuration.Send(Value);
end;

function TBufferAudioSourceNode.GetDetune: Single;
begin
  Result := FdDetune.Value;
end;

procedure TBufferAudioSourceNode.SetDetune(const Value: Single);
begin
  FdDetune.Send(Value);
end;

function TBufferAudioSourceNode.GetLoad: Boolean;
begin
  Result := FdLoad.Value;
end;

procedure TBufferAudioSourceNode.SetLoad(const Value: Boolean);
begin
  FdLoad.Send(Value);
end;

function TBufferAudioSourceNode.GetLoop: Boolean;
begin
  Result := FdLoop.Value;
end;

procedure TBufferAudioSourceNode.SetLoop(const Value: Boolean);
begin
  FdLoop.Send(Value);
end;

function TBufferAudioSourceNode.GetLoopEnd: TFloatTime;
begin
  Result := FdLoopEnd.Value;
end;

procedure TBufferAudioSourceNode.SetLoopEnd(const Value: TFloatTime);
begin
  FdLoopEnd.Send(Value);
end;

function TBufferAudioSourceNode.GetLoopStart: TFloatTime;
begin
  Result := FdLoopStart.Value;
end;

procedure TBufferAudioSourceNode.SetLoopStart(const Value: TFloatTime);
begin
  FdLoopStart.Send(Value);
end;

function TBufferAudioSourceNode.GetNumberOfChannels: Integer;
begin
  Result := FdNumberOfChannels.Value;
end;

procedure TBufferAudioSourceNode.SetNumberOfChannels(const Value: Integer);
begin
  FdNumberOfChannels.Send(Value);
end;

function TBufferAudioSourceNode.GetPauseTime: TFloatTime;
begin
  Result := FdPauseTime.Value;
end;

procedure TBufferAudioSourceNode.SetPauseTime(const Value: TFloatTime);
begin
  FdPauseTime.Send(Value);
end;

function TBufferAudioSourceNode.GetPlaybackRate: Single;
begin
  Result := FdPlaybackRate.Value;
end;

procedure TBufferAudioSourceNode.SetPlaybackRate(const Value: Single);
begin
  FdPlaybackRate.Send(Value);
end;

function TBufferAudioSourceNode.GetResumeTime: TFloatTime;
begin
  Result := FdResumeTime.Value;
end;

procedure TBufferAudioSourceNode.SetResumeTime(const Value: TFloatTime);
begin
  FdResumeTime.Send(Value);
end;

function TBufferAudioSourceNode.GetSampleRate: Single;
begin
  Result := FdSampleRate.Value;
end;

procedure TBufferAudioSourceNode.SetSampleRate(const Value: Single);
begin
  FdSampleRate.Send(Value);
end;

function TBufferAudioSourceNode.GetStartTime: TFloatTime;
begin
  Result := FdStartTime.Value;
end;

procedure TBufferAudioSourceNode.SetStartTime(const Value: TFloatTime);
begin
  FdStartTime.Send(Value);
end;

function TBufferAudioSourceNode.GetStopTime: TFloatTime;
begin
  Result := FdStopTime.Value;
end;

procedure TBufferAudioSourceNode.SetStopTime(const Value: TFloatTime);
begin
  FdStopTime.Send(Value);
end;

procedure TBufferAudioSourceNode.SetUrl(const Value: array of string);
begin
  FdUrl.Send(Value);
end;

procedure TBufferAudioSourceNode.SetUrl(const Value: TCastleStringList);
begin
  FdUrl.Send(Value);
end;

class function TBufferAudioSourceNode.ClassX3DType: String;
begin
  Result := 'BufferAudioSource';
end;

procedure TBufferAudioSourceNode.CreateNode;
begin
  inherited;

  FFdAutoRefresh := TSFTime.Create(Self, True, 'autoRefresh', 0.0);
   FdAutoRefresh.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdAutoRefresh);

  FFdAutoRefreshTimeLimit := TSFTime.Create(Self, True, 'autoRefreshTimeLimit', 3600.0);
   FdAutoRefreshTimeLimit.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdAutoRefreshTimeLimit);

  FFdBuffer := TMFFloat.Create(Self, True, 'buffer', []);
   FdBuffer.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdBuffer);

  FFdBufferDuration := TSFTime.Create(Self, True, 'bufferDuration', 0);
   FdBufferDuration.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdBufferDuration);

  FFdChannelCountMode := TSFStringEnum.Create(Self, True, 'channelCountMode', @, Ord(High()) + 1, Ord());
   FdChannelCountMode.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdChannelCountMode);

  FFdChannelInterpretation := TSFStringEnum.Create(Self, True, 'channelInterpretation', @, Ord(High()) + 1, Ord());
   FdChannelInterpretation.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdChannelInterpretation);

  FFdDetune := TSFFloat.Create(Self, True, 'detune', 0);
   FdDetune.ChangeAlways := chVisibleNonGeometry;
   FdDetune.MustBeNonnegative := true;
  AddField(FFdDetune);

  FFdLoad := TSFBool.Create(Self, True, 'load', true);
   FdLoad.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdLoad);

  FFdLoop := TSFBool.Create(Self, True, 'loop', false);
   FdLoop.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdLoop);

  FFdLoopEnd := TSFTime.Create(Self, True, 'loopEnd', 0);
   FdLoopEnd.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdLoopEnd);

  FFdLoopStart := TSFTime.Create(Self, True, 'loopStart', 0);
   FdLoopStart.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdLoopStart);

  FFdNumberOfChannels := TSFInt32.Create(Self, True, 'numberOfChannels', 0);
   FdNumberOfChannels.ChangeAlways := chVisibleNonGeometry;
   FdNumberOfChannels.MustBeNonnegative := true;
  AddField(FFdNumberOfChannels);

  FFdPauseTime := TSFTime.Create(Self, True, 'pauseTime', 0);
   FdPauseTime.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdPauseTime);

  FFdPlaybackRate := TSFFloat.Create(Self, True, 'playbackRate', 1);
   FdPlaybackRate.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdPlaybackRate);

  FFdResumeTime := TSFTime.Create(Self, True, 'resumeTime', 0);
   FdResumeTime.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdResumeTime);

  FFdSampleRate := TSFFloat.Create(Self, True, 'sampleRate', 0);
   FdSampleRate.ChangeAlways := chVisibleNonGeometry;
   FdSampleRate.MustBeNonnegative := true;
  AddField(FFdSampleRate);

  FFdStartTime := TSFTime.Create(Self, True, 'startTime', 0);
   FdStartTime.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdStartTime);

  FFdStopTime := TSFTime.Create(Self, True, 'stopTime', 0);
   FdStopTime.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdStopTime);

  FFdUrl := TMFString.Create(Self, True, 'url', []);
   FdUrl.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdUrl);

  FEventBufferLength := TSFInt32Event.Create(Self, 'bufferLength', false);
  AddEvent(FEventBufferLength);

  FEventChannelCount := TSFInt32Event.Create(Self, 'channelCount', false);
  AddEvent(FEventChannelCount);

  FEventElapsedTime := TSFTimeEvent.Create(Self, 'elapsedTime', false);
  AddEvent(FEventElapsedTime);

  FEventIsActive := TSFBoolEvent.Create(Self, 'isActive', false);
  AddEvent(FEventIsActive);

  FEventIsPaused := TSFBoolEvent.Create(Self, 'isPaused', false);
  AddEvent(FEventIsPaused);
end;

{$endif read_implementation}
